// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  emailVerified DateTime?
  name          String
  password      String?
  image         String?
  accounts      Account[]
  todos         Todo[] // one-to-many
  notes         Note[] // one-to-many
  tags          Tag[] // one-to-many
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.String
  token_type        String? @db.String
  scope             String? @db.String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Todo {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  completed   Boolean   @default(false)
  subTodos    SubTodo[]
  tagId       String?   @db.ObjectId
  tag         Tag?      @relation(fields: [tagId], references: [id]) // many-to-one
  todoDate    DateTime
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade) // many-to-one
  createdAt   DateTime  @default(now())
}

model SubTodo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  done        Boolean  @default(false)
  todoId      String   @db.ObjectId
  todo        Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  color     String
  createdAt DateTime @default(now())
  todos     Todo[] // one-to-many
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  color       String
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
